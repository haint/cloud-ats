# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# for testing only
OPTIONS /*path                          controllers.Application.preflight(path: String)

################################## RESTful API ######################################

# Return current context
GET     /api/v1/context                 @controllers.AuthenticationController.current()

# Authenticate users
POST    /api/v1/user/login              @controllers.AuthenticationController.login()
GET     /api/v1/user/logout             @controllers.AuthenticationController.logout()
POST	/api/v1/user/register			@controllers.AuthenticationController.register()
GET		/api/v1/user/checkAccount		@controllers.AuthenticationController.checkAccount()

GET		/api/v1/user/tenants			@controllers.AuthenticationController.tenants()

# User controller
GET     /api/v1/user/spaces             @controllers.UserController.spaces()
GET     /api/v1/user/go/:spaceId        @controllers.UserController.goTo(spaceId)

# DataDriven controller
GET     /api/v1/data/list/:tenant/:space 	@controllers.DataDrivenController.list(tenant, space)
POST    /api/v1/data                     	@controllers.DataDrivenController.newData()
GET		/api/v1/data/dataSet/:dataSetId		@controllers.DataDrivenController.getDataSet(dataSetId)
DELETE	/api/v1/data/delete/:dataId			@controllers.DataDrivenController.delete(dataId)
PUT		/api/v1/data/update					@controllers.DataDrivenController.update()

#######################################################################################################

#TODO: remove
GET     /api/v1/keyword/getListFuncProject  @controllers.KeywordController.list()
##

# Keyword project controller 

GET     /api/v1/project/keywords            @controllers.KeywordController.list()
GET     /api/v1/project/keyword/:projectId  @controllers.KeywordController.get(projectId)
POST    /api/v1/project/keyword/:projectId/run  @controllers.KeywordController.run(projectId)
POST    /api/v1/project/keyword             @controllers.KeywordController.create()

# Case controller
GET     /api/v1/project/keyword/:projectId/reference/cases  @controllers.CaseController.references(projectId)
GET     /api/v1/project/keyword/:projectId/cases  @controllers.CaseController.list(projectId)
POST    /api/v1/project/keyword/:projectId/case   @controllers.CaseController.create(projectId)
PUT     /api/v1/project/keyword/:projectId/case   @controllers.CaseController.update(projectId)
DELETE  /api/v1/project/keyword/:projectId/case/:caseId    @controllers.CaseController.delete(projectId, caseId)

# Suite controller

GET     /api/v1/project/keyword/:projectId/suites   @controllers.SuiteController.list(projectId)
POST    /api/v1/project/keyword/:projectId/suite    @controllers.SuiteController.create(projectId)
PUT     /api/v1/project/keyword/:projectId/suite    @controllers.SuiteController.update(projectId)
DELETE  /api/v1/project/keyword/:projectId/suite/:suiteId    @controllers.SuiteController.delete(projectId, suiteId)

# Custom keyword controller

GET     /api/v1/project/keyword/:projectId/customs  @controllers.CustomKeywordController.list(projectId)
POST    /api/v1/project/keyword/:projectId/custom   @controllers.CustomKeywordController.create(projectId)
PUT		/api/v1/project/keyword/:projectId/custom	@controllers.CustomKeywordController.update(projectId)
DELETE	/api/v1/project/keyword/:projectId/custom/:customKeywordId	@controllers.CustomKeywordController.delete(projectId, customKeywordId)

# Event tracking

GET     /api/v1/event/close/:token   @controllers.EventController.close(token)
GET     /api/v1/event/feed/:token    @controllers.EventController.feed(token)

########################################################################################################

# Performance controller
GET		/api/v1/performance/list			@controllers.PerformanceController.listPerformanceProject()
POST 	/api/v1/performance/createWizard	@controllers.PerformanceController.createPerformanceTestWizard()
POST	/api/v1/performance/uploadFile		@controllers.PerformanceController.createPerformanceTestByFile()
PUT		/api/v1/performance/updateScript 	@controllers.PerformanceController.updatePerformanceTestWizard()
GET		/api/v1/project/performances		@controllers.PerformanceController.list()
POST	/api/v1/project/performance			@controllers.PerformanceController.create()
GET		/api/v1/project/performance/getProjectById/:projectId	@controllers.PerformanceController.get(projectId)
POST	/api/v1/project/performance/run/:projectId				@controllers.PerformanceController.run(projectId)

# Script controller

GET		/api/v1/project/performance/:projectId/scripts				@controllers.ScriptController.list(projectId)
POST	/api/v1/project/performance/:projectId/createScriptByFile	@controllers.ScriptController.createByFile(projectId)
POST	/api/v1/project/performance/:projectId/script				@controllers.ScriptController.createBySamplers(projectId)
GET		/api/v1/project/performance/script/:id						@controllers.ScriptController.get(id)
DELETE	/api/v1/project/performance/script/:id						@controllers.ScriptController.delete(id)
PUT		/api/v1/project/performance/script							@controllers.ScriptController.update()

GET		/api/v1/project/performance/:projectId/scripts				@controllers.ScriptController.list(projectId)
POST	/api/v1/project/performance/:projectId/createScriptByFile	@controllers.ScriptController.createByFile(projectId)
POST	/api/v1/project/performance/:projectId/script				@controllers.ScriptController.createBySamplers(projectId)
GET		/api/v1/project/performance/report							@controllers.PerformanceController.report()
# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.at(path="/public", file)
