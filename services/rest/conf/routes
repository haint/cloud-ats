# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# for testing only
OPTIONS /*path                          controllers.Application.preflight(path: String)

################################## RESTful API ######################################

# Return current context
GET     /api/v1/context                 @controllers.AuthenticationController.current()

# Authenticate users
POST    /api/v1/user/login              @controllers.AuthenticationController.login()
GET     /api/v1/user/logout             @controllers.AuthenticationController.logout()
POST	/api/v1/user/register			@controllers.AuthenticationController.register()
GET		/api/v1/user/checkAccount		@controllers.AuthenticationController.checkAccount()

GET		/api/v1/user/tenants			@controllers.AuthenticationController.tenants()

# User controller
GET     /api/v1/user/spaces             @controllers.UserController.spaces()
GET     /api/v1/user/go/:spaceId        @controllers.UserController.goTo(spaceId)

# DataDriven controller
GET     /api/v1/data/list/:tenant/:space 	@controllers.DataDrivenController.list(tenant, space)
POST    /api/v1/data                     	@controllers.DataDrivenController.newData()
GET		/api/v1/data/dataSet/:dataSetId		@controllers.DataDrivenController.getDataSet(dataSetId)
DELETE	/api/v1/data/delete/:dataId			@controllers.DataDrivenController.delete(dataId)
PUT		/api/v1/data/update					@controllers.DataDrivenController.update()

# Keyword project controller
POST	/api/v1/keyword						@controllers.KeywordProjectController.newData()
GET		/api/v1/getList/:tenant/:space		@controllers.KeywordProjectController.getListKeywordProject(tenant,space)
GET		/api/v1/getListTestCase				@controllers.KeywordProjectController.getListTestCase()
POST	/api/v1/testcase					@controllers.KeywordProjectController.newTestCase()
GET		/api/v1/getCustomKeywords/:tenant/:space/:projectID			@controllers.KeywordProjectController.getCustomKeywords(tenant,space,projectID)
POST	/api/v1/addCustomKeyword									@controllers.KeywordProjectController.addCustomKeyword()
DELETE /api/v1/removeCustomKeyword/:projectID/:customKeywordName	@controllers.KeywordProjectController.removeCustomKeyword(projectID,customKeywordName)		
PUT		/api/v1/updateCustomKeyword												@controllers.KeywordProjectController.updateCustomKeyword()
GET		/api/v1/keyword/getTestsuites/:projectId					@controllers.KeywordProjectController.getTestsuites(projectId)
GET		/api/v1/keyword/getListFuncProject							@controllers.KeywordProjectController.getListProject()
POST	/api/v1/keyword/createKeywordProject						@controllers.KeywordProjectController.createKeywordProject()
POST	/api/v1/keyword/createTestSuite								@controllers.KeywordProjectController.createTestSuite()
POST	/api/v1/keyword/runKeywordProject							@controllers.KeywordProjectController.runKeywordProject()
GET		/api/v1/keyword/deleteTestSuite/:suiteId					@controllers.KeywordProjectController.deleteTestSuite(suiteId)
PUT		/api/v1/updateCase											@controllers.KeywordProjectController.updateCase()
DELETE	/api/v1/removeCase/:caseId			@controllers.KeywordProjectController.removeCase(caseId)
GET		/api/v1/keyword/deleteTestSuite/:suiteId/:projectId					@controllers.KeywordProjectController.deleteTestSuite(suiteId, projectId)
PUT		/api/v1/keyword/updateTestSuite								@controllers.KeywordProjectController.updateTestSuite()
# Upload script
POST 	/api/v1/functional/upload			@controllers.FunctionalController.upload()
# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.at(path="/public", file)

# Performance controller
GET		/api/v1/performance/list			@controllers.PerformanceController.listPerformanceProject()
POST 	/api/v1/performance/createWizard	@controllers.PerformanceController.createPerformanceTestWizard()
POST	/api/v1/performance/uploadFile		@controllers.PerformanceController.createPerformanceTestByFile()
PUT		/api/v1/performance/updateScript 	@controllers.PerformanceController.updatePerformanceTestWizard()


