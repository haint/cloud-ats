@args() {
  String scripts
}
package org.ats.generated;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.jmeter.engine.DistributedRunner;
import org.apache.jmeter.save.SaveService;
import org.apache.jmeter.testelement.TestPlan;
import org.apache.jmeter.threads.RemoteThreadsListenerTestElement;
import org.apache.jmeter.threads.ThreadGroup;
import org.apache.jmeter.util.JMeterUtils;
import org.apache.jorphan.collections.HashTree;
import org.apache.jorphan.collections.ListedHashTree;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

public class JMeterRunner {

  private List<String> hostList = new ArrayList<String>();
  
  private Map<String, Integer> output = new HashMap<String, Integer>();
  
  @@BeforeClass
  public void setup() {
    JMeterUtils.loadJMeterProperties("src/test/resources/jmeter/bin/jmeter.properties");
    JMeterUtils.setJMeterHome("src/test/resources/jmeter");
    JMeterUtils.initLogging();
    
    String hosts = System.getProperty("jmeter.hosts");
    if (hosts == null || hosts.isEmpty()) throw new IllegalArgumentException("Need at least an host to run jmeter");
    
    String[] args = hosts.split(",");
    for (String arg : args) {
      hostList.add(arg.trim());
    }
  }

  @scripts
  
  private void shutdown() throws Exception {
    while (true) {
      int finish = 0;
      for (Map.Entry<String, Integer> entry : output.entrySet()) {
        if (countLine(entry.getKey()) == entry.getValue()) finish++;
      }
      if (finish == output.size()) return;
      Thread.sleep(5000);
    }
  }
  
  private int countLine(String path) throws IOException {
    File file = new File(path);
    if (!file.exists()) return 0;
    
    BufferedReader reader = new BufferedReader(new FileReader(file));
    int lines = 0;
    while (reader.readLine() != null) lines++;
    reader.close();
    return lines;
  }
}
